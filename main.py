import asyncio
import logging
import random
import numpy
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, FSInputFile
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup
import sqlite3


from config import BOT_TOKEN

dp = Dispatcher()
logger = logging.getLogger(__name__)

user_data = {}

conn_info = sqlite3.connect('Users_info.db', check_same_thread=False)
infocursor = conn_info.cursor()

conn_inventory = sqlite3.connect('Users_inventory.db', check_same_thread=False)
itemcursor = conn_inventory.cursor()

conn_fishing_rod_info = sqlite3.connect('fishing_rod_info.db', check_same_thread=False)
rod_infocursor = conn_fishing_rod_info.cursor()

catches = ['common_fish', 'uncommon_fish', 'rare_fish', 'super_rare_fish', 'epic_fish', 'legendary_fish', 'mythic_fish', 'collectibles']

code = str(random.randint(10000000, 99999999))
code_first_part = code[0:4]
code_second_part = code[4:9]

bot = Bot(token=BOT_TOKEN)

all_collection = [
    {
        "name": "–ö–∞—Ä—Ç–∞ —Å–æ–∫—Ä–æ–≤–∏—â",
        "nickname": "treasure_map",
        "type": "photo",
        "file_path": "data/images/treasure_map.png",
        "description": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±—É—Ç—ã–ª–∫–∞ —Å –∫–∞—Ä—Ç–æ–π —Å–æ–∫—Ä–æ–≤–∏—â –≤–Ω—É—Ç—Ä–∏."
    },
    {
        "name": "–°—Ç–∞—Ä–∏–Ω–Ω—ã–π –∑–æ–ª–æ—Ç–æ–π –∫—É–±–æ–∫",
        "nickname": "golden_chalice",
        "type": "photo",
        "file_path": "data/images/golden_chalice.png",
        "description": "–¢–∞–∫–æ–µ –∂–∞–ª–∫–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å, –∫–∞–∫ –∏ –≤–ø—Ä–æ—á–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–µ—â–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏."
    },
    {
        "name": "–°—Ç–∞—Ä–∏–Ω–Ω—ã–π –º–∞–≥–Ω–∏—Ç–Ω—ã–π –∫–æ–º–ø–∞—Å.",
        "nickname": "ancient_compass",
        "type": "photo",
        "file_path": "data/images/ancient_compass.png",
        "description": "–°–∞–º–∞—è –Ω–∞—Å—Ç–æ—è—â–∞—è —Ä–µ–ª–∏–∫–≤–∏—è. –ü—Ä–∞–≤–¥–∞, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –∫–∞–∫ –æ–Ω —Å—é–¥–∞ –ø–æ–ø–∞–ª."
    },
    {
        "name": "–ê—É–¥–∏–æ –∫–∞—Å—Å–µ—Ç–∞ #1",
        "nickname": "audio_tape01",
        "type": "audio",
        "file_path": "CQACAgIAAxkBAAIB...",
        "description": "–°–ª–µ–≥–∫–∞ –ø–æ—Ç—Ä–µ–ø–∞–Ω–∞, –∏–∑ –∑–∞ —á–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ —Ç–∞–º –∑–∞–º–µ—Ç–Ω–æ —É—Ö—É–¥—à–∏–ª–æ—Å—å."
    },
    {
        "name": "–ê—É–¥–∏–æ –∫–∞—Å—Å–µ—Ç–∞ #2",
        "nickname": "audio_tape02",
        "type": "audio",
        "file_path": "CQACAgIAAxkBAAIB...",
        "description": "–°–ª–µ–≥–∫–∞ –ø–æ—Ç—Ä–µ–ø–∞–Ω–∞, –∏–∑ –∑–∞ —á–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ —Ç–∞–º –∑–∞–º–µ—Ç–Ω–æ —É—Ö—É–¥—à–∏–ª–æ—Å—å."
    },
    {
        "name": "–ê—É–¥–∏–æ –∫–∞—Å—Å–µ—Ç–∞ #3",
        "nickname": "audio_tape03",
        "type": "audio",
        "file_path": "CQACAgIAAxkBAAIB...",
        "description": "–°–ª–µ–≥–∫–∞ –ø–æ—Ç—Ä–µ–ø–∞–Ω–∞, –∏–∑ –∑–∞ —á–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ —Ç–∞–º –∑–∞–º–µ—Ç–Ω–æ —É—Ö—É–¥—à–∏–ª–æ—Å—å."
    },
    {
        "name": "???",
        "nickname": "unknown",
        "type": "None",
        "description": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±—É—Ç—ã–ª–∫–∞ —Å –∑–∞–ø–∏—Å–∫–æ–π –≤–Ω—É—Ç—Ä–∏. –ù–∞ –∑–∞–ø–∏—Å–∫–µ –Ω–∞–ø–∏—Å–∞–Ω –∫–æ–¥: {code_second_part}."
    }
]

relics = [item["nickname"] for item in all_collection]
relics_names = [item["name"] for item in all_collection]
relic_chances = [0.25, 0.20, 0.18, 0.15, 0.12, 0.08, 0.02]

shop_items_ids = ["stick_fishing_rod", "rusty_reel_fishing_rod",
        "woven_willow_fishing_rod", "copper_catcher_fishing_rod", "frostbite_fisher_fishing_rod", "emberflow_fishing_rod",
        "moonlit_mender_fishing_rod", "serpentspine_fishing_rod", "thunderlord_fishing_rod", "leviathans_grasp_fishing_rod",
        "phoenixfeather_fishing_rod", "abyssal_whisper_fishing_rod", "celestial_harpoon_fishing_rod", "eternaltide_fishing_rod",
        "neptunes_trident_fishing_rod", "underwater_flashlight", "diving_suit"]

shop_item_nicknames_1 = rod_infocursor.execute("SELECT nickname FROM fishing_rod_info").fetchall()
shop_item_nicknames = [element[0] for element in shop_item_nicknames_1]
shop_item_nicknames.extend(["–ü–æ–¥–≤–æ–¥–Ω—ã–π —Ñ–æ–Ω–∞—Ä–∏–∫", "–ü–æ–¥–≤–æ–¥–Ω—ã–π –∫–æ—Å—Ç—é–º"])

shop_item_prices_1 = rod_infocursor.execute("SELECT price FROM fishing_rod_info").fetchall()
shop_item_prices = [element[0] for element in shop_item_prices_1]
shop_item_prices.extend([300, 500])

def setup_db():
    infocursor.execute('CREATE TABLE IF NOT EXISTS Users_info (user_id STRING, last_location STRING, code STRING, current_fishing_rod STRING)')
    conn_info.commit()
    itemcursor.execute('CREATE TABLE IF NOT EXISTS Users_inventory (user_id STRING, coins INTEGER, common_fish INTEGER, uncommon_fish INTEGER, rare_fish INTEGER, '
                   'super_rare_fish INTEGER, epic_fish INTEGER, legendary_fish INTEGER, mythic_fish INTEGER, stick_fishing_rod INTEGER, rusty_reel_fishing_rod INTEGER, '
                   'woven_willow_fishing_rod INTEGER, copper_catcher_fishing_rod INTEGER, frostbite_fisher_fishing_rod INTEGER, emberflow_fishing_rod INTEGER, '
                   'moonlit_mender_fishing_rod INTEGER, serpentspine_fishing_rod INTEGER, thunderlord_fishing_rod INTEGER, leviathans_grasp_fishing_rod INTEGER, '
                   'phoenixfeather_fishing_rod INTEGER, abyssal_whisper_fishing_rod INTEGER, celestial_harpoon_fishing_rod INTEGER, eternaltide_fishing_rod INTEGER, '
                   'neptunes_trident_fishing_rod INTEGER, treasure_map INTEGER, golden_chalice INTEGER, ancient_compass INTEGER, audio_tape01 INTEGER, audio_tape02 INTEGER, '
                   'audio_tape03 INTEGER, unknown INTEGER, important_note INTEGER, underwater_flashlight INTEGER, diving_suit INTEGER)')
    conn_inventory.commit()

@dp.message(CommandStart())
async def start(message: Message):
    global k
    global code
    user_id = message.from_user.id
    s = infocursor.execute('SELECT * FROM Users_info WHERE user_id = ?', (user_id,)).fetchall()
    if len(s) == 0:
        infocursor.execute(
            'INSERT INTO Users_info (user_id, last_location, code, current_fishing_rod) VALUES (?, NULL, ?, ?)',
            (user_id, code, "stick_fishing_rod")
        )
        conn_info.commit()
        itemcursor.execute(f"INSERT INTO Users_inventory (user_id, coins, common_fish, uncommon_fish, rare_fish, "
                            f"super_rare_fish, epic_fish, legendary_fish, mythic_fish, stick_fishing_rod, rusty_reel_fishing_rod, "
                            f"woven_willow_fishing_rod, copper_catcher_fishing_rod, frostbite_fisher_fishing_rod, emberflow_fishing_rod, "
                            f"moonlit_mender_fishing_rod, serpentspine_fishing_rod, thunderlord_fishing_rod, leviathans_grasp_fishing_rod, "
                            f"phoenixfeather_fishing_rod, abyssal_whisper_fishing_rod, celestial_harpoon_fishing_rod, eternaltide_fishing_rod, "
                            f"neptunes_trident_fishing_rod, treasure_map, golden_chalice, ancient_compass, audio_tape01, audio_tape02, "
                            f"audio_tape03, unknown, important_note, underwater_flashlight, diving_suit) VALUES ({user_id}, 0, 0, 0, 0, 0, 0, 0,"
                            f"0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)")
        conn_inventory.commit()
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä—ã–±–∞–ª–∫—É! –ù–∞–¥–µ—é—Å—å, —á—Ç–æ –≤—ã —Ç—É—Ç —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥—ë—Ç–µ —Å–≤–æ—ë –≤—Ä–µ–º—è!')
    await cmd_menu_start(message)

async def cmd_menu_start(message: Message):
    user_id = message.from_user.id
    infocursor.execute("UPDATE Users_info SET last_location = 'menu_start' WHERE user_id = ?",
                       (user_id,))
    conn_info.commit()
    reply_keyboard = [[KeyboardButton(text='üé£–†—ã–±–∞–ª–∫–∞üé£'),
                       KeyboardButton(text='üõí–ú–∞–≥–∞–∑–∏–Ωüõí')],
                      [KeyboardButton(text='üéí–ò–Ω–≤–µ–Ω—Ç–∞—Ä—åüéí'),
                       KeyboardButton(text='üßø–ö–æ–ª–ª–µ–∫—Ü–∏—èüßø')],
                      [KeyboardButton(text='‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öô'),
                       KeyboardButton(text='üìö–ì–∞–π–¥üìö')]]
    kb = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
    await message.answer('–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ', reply_markup=kb)

async def cmd_fishing(message: Message):
    user_id = message.from_user.id
    infocursor.execute(f"UPDATE Users_info SET last_location = 'fishing' WHERE user_id = {user_id}")
    conn_info.commit()
    reply_keyboard = [[KeyboardButton(text='üê†–ó–∞–∫–∏–Ω—É—Ç—å —É–¥–æ—á–∫—Éüê†')],
                      [KeyboardButton(text='üé£–í—ã–±—Ä–∞—Ç—å —É–¥–æ—á–∫—Éüé£')],
                      [KeyboardButton(text='‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™')]]
    kb = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
    await message.answer("–†–´–ë–ê–õ–ö–ê", reply_markup=kb)

async def cmd_fishing_in_process(message: Message):
    global catches
    global relics
    global relic_chances
    user_id = message.from_user.id
    infocursor.execute(f"UPDATE Users_info SET last_location = 'fishing_in_process' WHERE user_id = {user_id}")
    conn_info.commit()

    current_fishing_rod = infocursor.execute(
        "SELECT current_fishing_rod FROM Users_info WHERE user_id = ?",
        (user_id,)
    ).fetchone()[0]

    time = rod_infocursor.execute(
        "SELECT time_sec FROM fishing_rod_info WHERE rod_id = ?",
        (current_fishing_rod,)
    ).fetchone()[0]
    msg = await message.answer(f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {time} —Å–µ–∫—É–Ω–¥", reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(time)
    await msg.delete()

    chances_row = rod_infocursor.execute(
        "SELECT * FROM fishing_rod_info WHERE rod_id = ?",
        (current_fishing_rod,)
    ).fetchone()

    chances = list(chances_row[5:])
    chances = [x / 100 for x in chances]
    r = numpy.random.choice(catches, p=chances)

    current_count = itemcursor.execute(
        f"SELECT {r} FROM Users_inventory WHERE user_id = ?",
        (user_id,)
    ).fetchone()[0]

    double_chance = chances_row[4] / 100
    add_count = 1 + (1 if random.random() < double_chance else 0)

    itemcursor.execute(
        f"UPDATE Users_inventory SET {r} = ? WHERE user_id = ?",
        (current_count + add_count, user_id)
    )
    conn_inventory.commit()

    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='üê†–ó–∞–∫–∏–Ω—É—Ç—å —É–¥–æ—á–∫—É –µ—â—ë —Ä–∞–∑üê†')],
        [KeyboardButton(text='üé£–í—ã–±—Ä–∞—Ç—å —É–¥–æ—á–∫—Éüé£')],
        [KeyboardButton(text='‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™')]
    ], resize_keyboard=True)

    if r == 'collectibles':
        q = numpy.random.choice(relics, p=relic_chances)
        itemcursor.execute(
            f"UPDATE Users_inventory SET {q} = {q} + 1 WHERE user_id = ?",
            (user_id,)
        )
        conn_inventory.commit()
        await message.answer(
            f"–í—ã –ø–æ–π–º–∞–ª–∏ —Ä–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç! –≠—Ç–æ {q}!" + (" –ê –µ—â—ë —ç—Ç–æ –¥–≤–æ–π–Ω–æ–π —É–ª–æ–≤!" if add_count > 1 else ""),
            reply_markup=kb)
    else:
        await message.answer(f"–í—ã –ø–æ–π–º–∞–ª–∏ {r}!" + (" –ê –µ—â—ë —ç—Ç–æ –¥–≤–æ–π–Ω–æ–π —É–ª–æ–≤!" if add_count > 1 else ""),
                             reply_markup=kb)

async def cmd_select_fishing_rod(message: Message):
    user_id = message.from_user.id
    infocursor.execute("UPDATE Users_info SET last_location = 'select_fishing_rod' WHERE user_id = ?", (user_id,))
    conn_info.commit()

    try:
        current_rod = infocursor.execute(
            "SELECT current_fishing_rod FROM Users_info WHERE user_id = ?",
            (user_id,)
        ).fetchone()[0]

        itemcursor.execute("PRAGMA table_info(Users_inventory)")
        columns = [col[1] for col in itemcursor.fetchall() if "_fishing_rod" in col[1]]

        rods_query = f"SELECT {', '.join(columns)} FROM Users_inventory WHERE user_id = ?"
        itemcursor.execute(rods_query, (user_id,))
        owned_rods = [col for col, val in zip(columns, itemcursor.fetchone()) if val > 0]

        rod_buttons = []
        for rod_id in owned_rods:
            rod_name = rod_infocursor.execute(
                "SELECT nickname FROM fishing_rod_info WHERE rod_id = ?",
                (rod_id,)
            ).fetchone()[0]

            display_name = f"{rod_name} ‚úÖ" if rod_id == current_rod else rod_name
            rod_buttons.append([KeyboardButton(text=display_name)])

        rod_buttons.append([KeyboardButton(text='‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™')])
        kb = ReplyKeyboardMarkup(keyboard=rod_buttons, resize_keyboard=True)

        await message.answer(
            "üé£ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ—á–∫—É:" if rod_buttons else "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–¥–æ—á–µ–∫!",
            reply_markup=kb
        )

    except Exception as e:
        logging.error(f"Rod selection error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–¥–æ—á–µ–∫", reply_markup=ReplyKeyboardRemove())

@dp.message(F.text.endswith('‚úÖ'))
async def handle_rod_selection(message: Message):
    user_id = message.from_user.id
    selected_name = message.text.replace(' ‚úÖ', '').strip()

    try:
        rod_id, = rod_infocursor.execute(
            "SELECT rod_id FROM fishing_rod_info WHERE nickname = ?",
            (selected_name,)
        ).fetchone()

        has_rod = itemcursor.execute(
            f"SELECT {rod_id} FROM Users_inventory WHERE user_id = ?",
            (user_id,)
        ).fetchone()[0]

        if has_rod:
            infocursor.execute(
                "UPDATE Users_info SET current_fishing_rod = ? WHERE user_id = ?",
                (rod_id, user_id)
            )
            conn_info.commit()
            await message.answer(f"‚ö° –ê–∫—Ç–∏–≤–Ω–∞—è —É–¥–æ—á–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {selected_name}!")
            await cmd_fishing(message)

    except TypeError:
        await message.answer("‚ùå –£–¥–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    except Exception as e:
        logging.error(f"Rod change error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —É–¥–æ—á–∫–∏", reply_markup=ReplyKeyboardRemove())

async def cmd_shop(message: Message):
    user_id = message.from_user.id
    infocursor.execute(f"UPDATE Users_info SET last_location = 'shop' WHERE user_id = {user_id}")
    conn_info.commit()
    reply_keyboard = []
    for i in range(len(shop_items_ids)):
        shop_text = f"–ö–£–ü–ò–¢–¨ {shop_item_nicknames[i]} –ó–ê {shop_item_prices[i]} COINS"
        reply_keyboard.append([KeyboardButton(text=shop_text)])
    reply_keyboard.append([KeyboardButton(text='‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™')])
    kb = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True)
    await message.answer("–ú–ê–ì–ê–ó–ò–ù", reply_markup=kb)

async def cmd_inventory(message: Message):
    user_id = message.from_user.id
    infocursor.execute(f"UPDATE Users_info SET last_location = 'inventory' WHERE user_id = {user_id}")
    conn_info.commit()
    itemcursor.execute("PRAGMA table_info(Users_inventory)")
    columns = [column[1] for column in itemcursor.fetchall()][1:]

    itemcursor.execute("SELECT * FROM Users_inventory WHERE user_id = ?",(user_id,))
    data = itemcursor.fetchone()[1:]
    inventory_lines = [f"{name.replace('_', ' ').title()}: {value}" for name, value in zip(columns, data)if value > 0]
    if not inventory_lines:
        inventory_text = "–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!"
    else:
        inventory_text = "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n" + "\n".join(inventory_lines)
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='üíµ–ü–†–û–î–ê–¢–¨ –í–°–Æ –†–´–ë–£üíµ')],
                  [KeyboardButton(text='‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™')]], resize_keyboard=True)
    await message.answer(inventory_text, reply_markup=kb)


async def cmd_collections(message: Message):
    user_id = message.from_user.id
    infocursor.execute(f"UPDATE Users_info SET last_location = 'collections' WHERE user_id = {user_id}")
    conn_info.commit()

    itemcursor.execute(f"""
        SELECT treasure_map, golden_chalice, ancient_compass, 
               audio_tape01, audio_tape02, audio_tape03, unknown 
        FROM Users_inventory 
        WHERE user_id = {user_id}
    """)
    relics_counts = itemcursor.fetchone()

    keyboard = []
    for i, relic in enumerate(all_collection):
        if relics_counts[i] > 0:
            keyboard.append([KeyboardButton(text=relic['name'])])

    keyboard.append([KeyboardButton(text='‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™')])

    kb = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    if len(keyboard) == 1:
        await message.answer("–ó–¥–µ—Å—å –ø–æ–∫–∞ —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç... –°–æ–±–∏—Ä–∞–π—Ç–µ —Ä–µ–ª–∏–∫–≤–∏–∏ —á—Ç–æ–±—ã –æ–Ω–∏ —Ç—É—Ç –±—ã–ª–∏!", reply_markup=kb)
    else:
        await message.answer("–ö–û–õ–õ–ï–ö–¶–ò–ò", reply_markup=kb)


@dp.message(F.text.in_([item['name'] for item in all_collection]))
async def handle_collection_item(message: Message):
    user_id = message.from_user.id
    item_name = message.text

    selected_relic = next((item for item in all_collection if item['name'] == item_name), None)

    if not selected_relic:
        await message.answer("–†–µ–ª–∏–∫–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    try:
        if selected_relic['type'] == 'photo':
            photo = FSInputFile(selected_relic['file_path'])
            await message.answer_photo(
                photo=photo,
                caption=selected_relic['description']
            )
        elif selected_relic['type'] == 'audio':
            await message.answer_audio(
                audio=selected_relic['file_path'],
                caption=selected_relic['description']
            )
        else:
            await message.answer(selected_relic['description'])

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–ª–∏–∫–≤–∏—é")

async def cmd_settings(message: Message):
    user_id = message.from_user.id
    infocursor.execute(f"UPDATE Users_info SET last_location = 'settings' WHERE user_id = {user_id}")
    conn_info.commit()
    reply_keyboard = [[KeyboardButton(text='‚ùå–£–î–ê–õ–ò–¢–¨ –î–ê–ù–ù–´–ï‚ùå')],
                        [KeyboardButton(text='‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™')]]
    kb = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
    await message.answer("–ù–ê–°–¢–†–û–ô–ö–ò", reply_markup=kb)

async def cmd_reset_request(message: Message):
    user_id = message.from_user.id
    infocursor.execute(f"UPDATE Users_info SET last_location = 'reset_request' WHERE user_id = {user_id}")
    conn_info.commit()
    reply_keyboard = [[KeyboardButton(text='‚úÖ–î–ê‚úÖ'),
                       KeyboardButton(text='‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™')]]
    kb = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
    await message.answer('–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?', reply_markup=kb)

async def cmd_reset_request_approved(message: Message):
    user_id = message.from_user.id
    infocursor.execute(f'DELETE from Users_info WHERE user_id = {user_id}')
    conn_info.commit()
    itemcursor.execute(f'DELETE from Users_inventory WHERE user_id = {user_id}')
    conn_inventory.commit()
    await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!', reply_markup=ReplyKeyboardRemove())

async def cmd_guide(message: Message):
    user_id = message.from_user.id
    infocursor.execute(f"UPDATE Users_info SET last_location = 'settings' WHERE user_id = {user_id}")
    conn_info.commit()
    reply_keyboard = [[KeyboardButton(text='‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™')]]
    kb = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
    await message.answer(
        "1Ô∏è‚É£ üé£ –†—ã–±–∞–ª–∫–∞: –ù–∞—á–Ω–∏—Ç–µ –ª–æ–≤–∏—Ç—å —Ä—ã–±—É! –ó–∞–∫–∏–Ω—å—Ç–µ —É–¥–æ—á–∫—É –∏ –∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∫–ª—é–Ω–µ—Ç. –ß–µ–º –±–æ–ª—å—à–µ —Ä—ã–±—ã –ø–æ–π–º–∞–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ!\n\n"
        "2Ô∏è‚É£ üõí –ú–∞–≥–∞–∑–∏–Ω: –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–µ —É–¥–æ—á–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —à–∞–Ω—Å–æ–≤ –Ω–∞ —É–¥–∞—á–Ω—ã–π —É–ª–æ–≤!\n\n"
        "3Ô∏è‚É£ üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ –≤–µ—â–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å, –≤—Å–µ –≤–∞—â–∏ –ø–æ–π–º–∞–Ω–Ω—ã–µ —Ä—ã–±—ã, —É–¥–æ—á–∫–∏ –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å.\n\n"
        "–¢–∞–∫–∂–µ —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –º—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ—é —Ä—ã–±—É –∏ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ —ç—Ç–æ –¥–µ–Ω—å–≥–∏\n\n"
        "4Ô∏è‚É£ üßø –ö–æ–ª–ª–µ–∫—Ü–∏–∏: –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ —Ä–µ–ª–∏–∫–≤–∏–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤—ã —É–∂–µ —Å–æ–±—Ä–∞–ª–∏. –†–µ–ª–∏–∫–≤–∏–∏ –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å, –∏—Ö –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã!\n\n"
        "5Ô∏è‚É£ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –í —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, —ç—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!\n\n"
        "–£–¥–∞—á–Ω–æ–π —Ä—ã–±–∞–ª–∫–∏!",
        reply_markup=kb)



@dp.message()
async def handle_buttons(message: Message):
    user_id = message.from_user.id
    location = infocursor.execute('SELECT last_location FROM Users_info WHERE user_id = ?',
            (user_id,)).fetchone()
    if message.text == '/fishing':
        await cmd_fishing(message)
    elif message.text == '/shop':
        await cmd_shop(message)
    elif message.text == '/inventory':
        await cmd_inventory(message)
    elif message.text == '/collection':
        await cmd_collections(message)
    elif message.text == '/settings':
        await cmd_settings(message)
    elif message.text == '/guide':
        await cmd_guide(message)
    elif location[0] == 'menu_start':
        if message.text == 'üé£–†—ã–±–∞–ª–∫–∞üé£':
            await cmd_fishing(message)
        elif message.text == 'üõí–ú–∞–≥–∞–∑–∏–Ωüõí':
            await cmd_shop(message)
        elif message.text == 'üéí–ò–Ω–≤–µ–Ω—Ç–∞—Ä—åüéí':
            await cmd_inventory(message)
        elif message.text == 'üßø–ö–æ–ª–ª–µ–∫—Ü–∏—èüßø':
            await cmd_collections(message)
        elif message.text == '‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öô':
            await cmd_settings(message)
        elif message.text == 'üìö–ì–∞–π–¥üìö':
            await cmd_guide(message)
    elif location[0] == 'fishing':
        if message.text == 'üê†–ó–∞–∫–∏–Ω—É—Ç—å —É–¥–æ—á–∫—Éüê†':
            await cmd_fishing_in_process(message)
        elif message.text == 'üé£–í—ã–±—Ä–∞—Ç—å —É–¥–æ—á–∫—Éüé£':
            await cmd_select_fishing_rod(message)
        elif message.text == '‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™':
            await cmd_menu_start(message)
    elif location[0] == 'fishing_in_process':
        if message.text == 'üê†–ó–∞–∫–∏–Ω—É—Ç—å —É–¥–æ—á–∫—É –µ—â—ë —Ä–∞–∑üê†':
            await cmd_fishing_in_process(message)
        elif message.text == 'üé£–í—ã–±—Ä–∞—Ç—å —É–¥–æ—á–∫—Éüé£':
            await cmd_select_fishing_rod(message)
        elif message.text == '‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™':
            await cmd_menu_start(message)
    elif location[0] == 'select_fishing_rod':
        if message.text == '‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™':
            await cmd_menu_start(message)
    elif location[0] == 'shop':
        if message.text == '‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™':
            await cmd_menu_start(message)
        elif message.text:
            for i in range(len(shop_item_nicknames)):
                if shop_item_nicknames[i] in message.text and str(shop_item_prices[i]) in message.text:
                    y = shop_item_nicknames[i]
                    u = shop_item_prices[i]
                    l = 1
                    break
            coins = itemcursor.execute(f"SELECT coins FROM Users_inventory where user_id = {user_id}").fetchone()[0]
            if coins >= u:
                coins -= u
                itemcursor.execute(f"UPDATE Users_inventory SET coins = {coins}, {shop_items_ids[l]} = {shop_items_ids[l]} + 1 WHERE user_id = {user_id}")
                conn_inventory.commit()
                await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {y} –∑–∞ {u} COINS! –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {coins} –º–æ–Ω–µ—Ç –≤ –∫–æ—à–µ–ª—å–∫–µ!")
                await cmd_shop(message)
            else:
                await message.answer(f"–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É!")


    elif location[0] == 'inventory':
        if message.text == 'üíµ–ü–†–û–î–ê–¢–¨ –í–°–Æ –†–´–ë–£üíµ':
            try:
                itemcursor.execute("""
                            SELECT common_fish, uncommon_fish, rare_fish, 
                                   super_rare_fish, epic_fish, legendary_fish, mythic_fish 
                            FROM Users_inventory 
                            WHERE user_id = ?""", (user_id,))

                fish_counts = itemcursor.fetchone()

                if not fish_counts:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return

                prices = [10, 50, 125, 500, 2500, 5000, 7500]
                total = sum(count * price for count, price in zip(fish_counts, prices))

                itemcursor.execute("""
                            UPDATE Users_inventory SET
                                coins = coins + ?,
                                common_fish = 0,
                                uncommon_fish = 0,
                                rare_fish = 0,
                                super_rare_fish = 0,
                                epic_fish = 0,
                                legendary_fish = 0,
                                mythic_fish = 0
                            WHERE user_id = ?""", (total, user_id))
                conn_inventory.commit()

                await message.answer(f"üí∞ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ –≤—Å—é —Ä—ã–±—É –∑–∞ {total} –º–æ–Ω–µ—Ç!")
                await cmd_menu_start(message)

            except sqlite3.Error as e:
                conn_inventory.rollback()
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {e}")
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        elif message.text == '‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™':
            await cmd_menu_start(message)
    elif location[0] == 'collections':
        if message.text == '‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™':
            await cmd_menu_start(message)
    elif location[0] == 'settings':
        if message.text == '‚ùå–£–î–ê–õ–ò–¢–¨ –î–ê–ù–ù–´–ï‚ùå':
            await cmd_reset_request(message)
        elif message.text == '‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™':
            await cmd_menu_start(message)
    elif location[0] == 'reset_request':
        if message.text == '‚úÖ–î–ê‚úÖ':
            await cmd_reset_request_approved(message)
        elif message.text == '‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™':
            await cmd_menu_start(message)
    elif location[0] == 'guide':
        if message.text == '‚è™–í–ï–†–ù–£–¢–¨–°–Ø‚è™':
            await cmd_menu_start(message)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ')


async def main():
    setup_db()
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
    )
    asyncio.run(main())